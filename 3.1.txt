// –ó–∞–¥–∞–Ω–∏–µ 1
// –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é convertArrToObj, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥–µ –≤ –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –Ω–∞ –≤—ã—Ö–æ–¥–µ –æ—Ç–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç
// const arr = [1, null, 'test', undefined]
// const obj = convertArrToObj()
// console.log(obj) // { 0: 1, 1: –Ω–æ–ª—å, 2: '—Ç–µ—Å—Ç', 3: –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ }

—Ñ—É–Ω–∫—Ü–∏—è  convertArrToObj ( –æ–±—Ä )  {
  –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π  –æ–±—ä–µ–∫—Ç  =  { } ;
  for  ( –ø—É—Å—Ç—å  —è  =  0 ;  —è  <  –æ–±—Ä . –¥–ª–∏–Ω–∞ ;  —è ++ )  {
    obj [ —è ]  –∑–Ω–∞–∫ —Ä–∞–≤–Ω–æ  –æ–±—Ä [ —è ] ;
  }
  –≤–µ—Ä–Ω—É—Ç—å  –æ–±—ä–µ–∫—Ç ;
}

const  arr  =  [ 1 ,  null ,  'test' ,  undefined ] ;
const  obj  =  convertArrToObj ( arr ) ;
–∫–æ–Ω—Å–æ–ª—å . –∂—É—Ä–Ω–∞–ª ( –æ–±—ä–µ–∫—Ç ) ;

// –ó–∞–¥–∞–Ω–∏–µ 2
// –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ countFromArr, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞. –ù–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤–∞, –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä–µ–∫—Ç, –≥–¥–µ - —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –µ–≥–æ –∫–æ–ª-–≤–æ –≤ –º–∞—Å—Å–∏–≤–µ
// const arr = [1, 1, 1, '—Ç–µ—Å—Ç', '—Ç–µ—Å—Ç']
// const res = countFromArr(arr)
// console.log(res) // { 1: 3, —Ç–µ—Å—Ç: 2 }

—Ñ—É–Ω–∫—Ü–∏—è  countFromArr ( –æ–±—Ä )  {
  –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞  countObj  =  { } ;
  for  ( –ø—É—Å—Ç—å  —è  =  0 ;  —è  <  –æ–±—Ä . –¥–ª–∏–Ω–∞ ;  —è ++ )  {
    –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω—ã–π  —ç–ª–µ–º–µ–Ω—Ç  =  –æ–±—Ä [ i ] ;
    –µ—Å–ª–∏  ( countObj [ —ç–ª–µ–º–µ–Ω—Ç ] )  {
      countObj [ —ç–ª–µ–º–µ–Ω—Ç ]  +=  1 ;
    }  –µ—â–µ  {
      countObj [ —ç–ª–µ–º–µ–Ω—Ç ]  =  1 ;
    }
  }
  –≤–æ–∑–≤—Ä–∞—Ç  countObj ;
}

const  arr  =  [ 1 ,  1 ,  1 ,  '—Ç–µ—Å—Ç' ,  '—Ç–µ—Å—Ç' ] ;
const  res  =  countFromArr ( arr ) ;
–∫–æ–Ω—Å–æ–ª—å . –∂—É—Ä–Ω–∞–ª ( —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ) ;

// –ó–∞–¥–∞–Ω–∏–µ 3
// –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ groupByField, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω—É –ø–æ–ª—é —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. –ù–∞ –≤—Ö–æ–¥–µ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø–æ–ª—è, –Ω–∞ –≤—ã—Ö–æ–¥–µ –æ–±—ä–µ–∫—Ç–∞ - –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ —ç—Ç–æ–º—É –∫–ª—é—á—É ü§™ (–Ω–∞–¥–µ—é—Å—å –≤ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–µ–π). –ü—Ä–∏–º–µ—Ä:
// const arr = [{test: 1}, {test: 2}, {test: 3}, {test: 1}, {test: 1}]
// const res = groupByField(arr, 'test')
// console.log(res) // { 1: [{—Ç–µ—Å—Ç: 1}, {—Ç–µ—Å—Ç: 1}, {—Ç–µ—Å—Ç: 1}], 2: [{—Ç–µ—Å—Ç: 2}], 3: [{—Ç–µ—Å—Ç: 3 }]}

—Ñ—É–Ω–∫—Ü–∏—è  groupByField ( –ø—Ä–∏–±—ã—Ç–∏–µ ,  –ø–æ–ª–µ )  {
  const  groupedObj  =  { } ;
  for  ( –ø—É—Å—Ç—å  —è  =  0 ;  —è  <  –æ–±—Ä . –¥–ª–∏–Ω–∞ ;  —è ++ )  {
    const  obj  =  –æ–±—Ä [ —è ] ;
    –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ  –∑–Ω–∞—á–µ–Ω–∏–µ  =  –æ–±—ä–µ–∫—Ç [ –ø–æ–ª–µ ] ;
    –µ—Å–ª–∏  ( —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç [ –∑–Ω–∞—á–µ–Ω–∏–µ ] )  {
      groupedObj [ –∑–Ω–∞—á–µ–Ω–∏–µ ] . —Ç–æ–ª—á–æ–∫ ( –æ–±—ä–µ–∫—Ç ) ;
    }  –µ—â–µ  {
      groupedObj [ –∑–Ω–∞—á–µ–Ω–∏–µ ]  =  [ obj ] ;
    }
  }
  –≤–µ—Ä–Ω—É—Ç—å  —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç ;
}

const  arr  =  [ { —Ç–µ—Å—Ç : 1 } , { —Ç–µ—Å—Ç : 2 } , { —Ç–µ—Å—Ç : 3 } , { —Ç–µ—Å—Ç : 1 } , { —Ç–µ—Å—Ç : 1 } ] ;
const  res  =  groupByField ( arr ,  '—Ç–µ—Å—Ç' ) ;
–∫–æ–Ω—Å–æ–ª—å . –∂—É—Ä–Ω–∞–ª ( —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ) ;